<HTML>
<head><title>Non-equilibrium free energy calculation</title></head>



<style type="text/css">
  div.important {color: #ff0000}
  div.code {
  background: #afd8de;
  border: #000 2px solid;
  padding: 10px;  width: 70%;
  }
</style>


<body BGCOLOR="white">


<font face="Arial" size="-1">
<a name="contents"></a>  <center><h1>Practical 10: Free energy calculations from non-equilibrium dynamics</h1></center>
<div class="code">

  
  <font color=black size=5>
    Contents
  </font>
  <UL>
    <font color=black size=3>
      <LI><a href="#intro">   A. Introduction: Free energy from non-equilibrium processes: </a><br>
<a href="#jarzynski">   - The Jarzynski equation </a><br>
<a href="#crooks">   - The Crooks theorem </a>

      <LI><a href="#na_crooks"> B. Solvation free energy of a sodium ion in water using the Crooks theorem </a>
      <LI><a href="#pmf_ion_channel"> C. Potential of Mean Force for a potassium ion permeating an ion channel </a>
      <LI><a href="#references"> References </a>

    </font>
  </UL>
  
</div>
<br>
<a name="intro"></a> <font color=#00c5d0 size=+0>   <h2>A.  Introduciton</h2> </font>
<p align="justify">
In a previous tutorial we learned two methods to compute Free Energies
associated to a given thermodynamic process: the solvation Free Energy of
sodium ions in water and the folding of a peptide in water.
In the first case we used Free Energy Perturbation (FEP), that takes advantage
of the fact that Free Energy is a state function. For an equilibrium process, 
the Free Energy is independent on 
the path the system takes to move from state A (no sodium in water) to state B
 (sodium fully solvated in water).
<br/>
<div align="center"><img src="ti.gif" width="219" height="36"></div>
<br/>
 As the sodium-water interactions were slowly
turned on, we recorded the changes in potential energy. Integration of these 
potential energy differences over the morphing path yields the Free Energy.
<br/>
To study the themodynamics of peptide folding, we relied on the Boltzamn 
probability distribution of themodynamic ensembles in equilibrium. The
relative population of folded and unfolded states was extracted from a 
molecular dynamics simulation, which gives direct access to Free Energy differences.

<br/>
<br/>

So far we have used equilibrium dynamics to compute Free Energies: the
transition between states is done infinitely slow, or reasonably slow, and the
work performed/gained is equal to the Free Energy.  By extracting Free Energies
from equilibrium simulations we have to make sure that the system fulfills a
Boltzmann equilibrium. In practice this means that we have to sufficiently
sample the phase space available. While this is conceptually not a problem, in
practice this poses a problem for systems with many degrees of freedom and long
relaxation times. 

<br/>
<br/>
<a name="jarzynski"></a> <font color=#00c5d0 size=0>   <h2>- The Jarzynski equation</h2> </font>
As a follow up, today we will learn that we can use non-equilibrium dynamics to 
compute Free Energies. Although several new relationships for non-equilibrium thermodynamics
were found during last century, the link between the work and the Free Energy remained
as an inequality: the work is always greater or equal to the underlying equilibrium Free
Energy ( <img src="work_F_inequality.gif" width="46" height="12"> ).  It was not until the very end of last century (1997-1998) that new
expressions directly relating the work and the Free Energy were found. The first one, known
as the Jarzynksi equation, relates the ensemble average over an exponential distribution
of the work with the Free Energy. 

<br/>
<br/>
<div align="center"><img src="jarzynski.gif" align=center></div>
<br/>

This relationship turned out to be extremely useful, as it allows,
for example, to compute binding Free Energies of ligands by repeteadly enforcing the unbinding
and recording the work distribution.
This process  can be mimicked in a computer experiment, with the advantage that the simulation
times are reduced due to the fast non-equilibrium trajectory. Nevertheless, several experiments
have to be carried out to get a reasonable estimate of the work distribution. 
<br/>
<br/>
<a name="crooks"></a> <font color=#00c5d0 size=0>   <h2>- The Crooks theorem</h2> </font>
Yet another non-equilibrium relationship, even more fundamental, was put forward by Crooks in 
1999. The expression is grounded on microscopic reversibility, and one useful theorem derived 
from it is the Transient Fluctuation Theorem (TFT).
The former relates the ratio of the work distribution for a Markovian process that moves from 
state A to state B and from state B to a A with the dissipated work involved in
the transformation. Look at the<a
href=http://en.wikipedia.org/wiki/Crooks_fluctuation_theorem> wikipedia
page</a> for more information, if you're interested.
</p>
<br/>
<br/>
<div align="center"><img src="crooks.gif" align=center ></div>
<br/>
A first approach is to estimate the free energy as the work value W where both distributions overlap, <em>PF(W) = PB(-W)</em>:
</p>
<br/>
<br/>
<div align="center"><img src="distributions.png" align=center width= 300  ></div>
<br/>
<a name="crooks2"></n> A second approach is to take the logarithm of the Crooks equation,
</p>
<br/>
<br/>
<div align="center"><img src="crooks2.gif" align=center ></div>
<br/>
Then, plot the left side of this equation vs. the work, which is a straight line, and estimate the free energy from the intercept.  

<p align="justify">
Today we will take advantage of these recent breakthroughs to compute Free Energies
( an equilibrium property ) from non-equilibrium processes. To illustrate the capabilities of these
relationships we will first study the solvation Free Energy of an ion in water, now by means of 
several fast (non-equilibrium) Free Energy Perturbation simulations. A second  application
of non-equilibrium relationships will serve us to elucidate the Free Energy profile for an ion 
permeating through a peptidic ion channel.

<br/>

</p>

Go back to <a href="#contents">Contents</a>

<a name="na_crooks"></a> <font color=#00c5d0 size=+0>   <h2>B. Solvation free energy of a sodium ion in water using the Crooks theorem </h2> </font>
<p align="justify">

This exercise uses the same simulation technique (FEP) previously introduced in these
tutorials. We learned that sufficiently long simulations were needed to obtain a converged
value for the solvation Free Energy, where the morphing parameter lambda was slowly changed
from 0 (no ion-water interactions) to 1 (all interactions switched on).
<br/>
<div align="center"><img src="TI_picture.png" align="center"></div>
<br/>

<p align="justify">
Another way of computing the solvation Free Energy  would be to perform
multiple (fast) simulations.  Some will drive the system from an equilibrated
state A (lambda = 0) to a final state B (lambda = 1).  We will call such a
process the Forward transformation.  Additionally, some will be perfomed in the
opposite direction (Reverse transformation), e.g. an equilibrated system in the
B state will be transformed into state A.  By collecting the work performed in
either Forward or Reverse transformation we can obtain their respective
probability distributions.  Recalling Crooks' Transient Fluctuation Theorem we
know that the point where the two probability distributions meet the dissipative
work is zero. Hence, at this point the work will equal the Free Energy.  </p>

<br/>
<br/>
<div align="center"><img src="fast_TI.png" align="center"></div>
<br/>

</p>
<p align="justify">
For the exercise we will need a set of starting structures in the initial (no sodium-water interactions)
and final state (all interactions present). Recall that while the interactions are not acting (state A),
the ion is actually present in the simulation box. Additionally, we need a topology file describing the 
interactions in the system and a MD parameter file. 
<br/>
<br/>
In this zipped <a href="practicum_crooks.tar.gz"><font color=blue>
folder</font></a> you will find all the files needed for the exercise.  
Once you have donwloaded the file, use the following commands to extract its contents
<br/> 
<h5>
tar -xvzf practicum_crooks.tar.gz ; rm -f practicum_crooks.tar.gz
</h5>

or, if you downloaded to the default 'Desktop' folder:
<br/> 
<p>
<h5>
tar -xvzf Desktop/practicum_crooks.tar.gz ; rm -f Desktop/practicum_crooks.tar.gz
</h5>

</p>
Now move to the extracted directory:
<p>
<h5>
cd practicum_crooks
</h5>
</p>

There you will find one folder that contains the necessary
files for the simulations in Forward direction and another one for the Reverse transformation. 

As a first approximation, we will compute one very fast FEP simulation in the forward direction. In this 
case the lenght of the simulation is just 10 ps.  During this time the morphing parameter will be switched
from 0 to 1 in increments of 0.0002. Let's go for it, 
<br/>
<br/>
<h5>cd fast_FWD</h5>

Prepare the MD run by issuing
<br/>
<br/>
<h5> gmx grompp -f  forward.mdp -c  fwd_snapshot.pdb -o fwd_run.tpr -p topol.top </h5>

And start the simulation like this,
<br/>
<br/>
<h5> gmx mdrun -s fwd_run.tpr -v</h5>

The molecular dynamics program generates, as you know, a dhdl.xvg file that contains the 
dG/dlambda as a function of time. We will integrate the curve with respect to the time and
finally divide by 10 (the simulation time), exactly as we did last practical.
<br/>
Open the file with xmgrace 
<br/>
<br/>
<h5>xmgrace dhdl.xvg</h5>

and under "Data", select "Transformations", followed by "Integration", and press "Accept". Remember that the
result of the integration has to be divided by 10.

<br/>
<br/>
As you can see, the result is quite off the expected value, around -393 kJ/mol. As we know, this comes from 
the dissipative contributions that arises due to the fast morphing. 
<br/>
We know that if the obtained "Free Energy" would be a state function, the value for the Reverse transformation
should be the same. Let's check it! Go to the folder were the input files for reverse FEP are located,
<br/>
<br/>
<h5>cd ../fast_REV </h5>

Here the initial state is the sodium ion fully hidrated in water. As before, we prepare the input file
and run the simulation.

<br/>
<br/>
<h5>
gmx grompp -f back.mdp -c rev_snapshot.pdb -o rev_run.tpr -p topol.top
<br/>
gmx mdrun -s rev_run.tpr -v
</h5>

Integrate the dhdl.xvg as we did before, remember to divide by 10!

<br/>
<br/>

As you can see, both results differ quite a bit. Since we performed the simulations too fast, the 
difference of the computed "Free Energies" is not zero, we apply/obtain work to/from the system.

<br/>
<br/>
<font color=red size=+1> Question: </font>
... but what happens if we average the two results (Forward and Reverse)? Does the result get closer to the actual converged
result for the Free Energy difference (around -393 kJ/mol)? Why does this happen? 

<br/>
<br/>
A way to improve the results is to actually use Crooks' TFT. This demands getting a probability distribution 
for the work (our non-converged Free Energies) in the Forward (lambda 0->1) and Reverse  (lambda 1->0) directions.
It is important that the initial state of the system is in thermodynamic equilibrium. The initial structures you will
use for the  Forward and Reverse simulations were obtained from different snapshots of equilibrated simulations at
lambda 0 and 1 respectively.

<br/>
Since the method implies running many simulations in each direction, we will use a set of simple shell scripts (tiny programs that
make life easier when dealing with repeated tasks). Don't worry if you don't really understand 
the syntax, the basic steps you already know: prepare input file based on structure, interaction parameters and 
MD input file. 
<br/>
<br/>
We can start with the Forward runs. 

<br/>
<br/>
<h5> cd ../FWD_RUN_TFT </h5>
You can see that there are several folders, each containing the inital structures.
Let's create the input files (so called tpr files) for the simulation runs first. From
the FWD_RUN_TFT directory execute
<br/>
<br/>

First install csh with:
<h5> sudo apt-get install csh </h5>

and run the follwing script:
<h5> ./create_tpr.csh </h5>
Now we can start the dynamics. The next command executes the script that takes care
to start each simulation sequentially,
<br/>
<br/>
<h5> ./do_md.csh </h5>

>>> ( Since it takes some time to compute each run, approx. 1 minute each, you can 
use the time to read the theory above  and/or the introduction for next exercise ) <<<  

<br/>
<br/>

If all went fine, we should have a dhdl.xvg file in each folder. 

</a> <font color=#00c5d0 size=0>   <h2>Estimation of the free energy as the intersection point of the forward and backwards work distributions </h2> </font>

The next step will be to 
compute the work for every run and put the data in one file. Luckily you don't have to 
integrate every single dhdl.xvg file by hand. The next script takes care of it: it enters
each folder, integrates the FEP file and even divides by the simulation time! 

<br/>
<br/>
<h5> export LC_NUMERIC=en  </h5>
<h5> ./gather_work.csh </h5>
The first command makes sure that the scripting language AWK uses dots as the decimal separator.
The second outputs the results to the screen. To write them directly in a file, say Work_fwd.txt, do the following,

<br/>
<br/>
<h5> ./gather_work.csh | grep -v csh >  ../Work_fwd.txt </h5>


Good, now will do the same but for the reverse simulations. To save the time
required for the simulations. we have already done these for you, and we can
now simply collect the result:
<br/>
<br/>

<h5> 
cd ../REV_RUN_TFT 
<br/>
./gather_work.csh | grep -v csh > ../Work_rev.txt
</h5>

We now generated a series of possible work values for the forward and reverse FEP. Ideally, we would
compute enough values to estimate a probability distribution of the work. If we don't have any extra information
on the distribution function, it is necessary to have an overlap between the two distributions, since Crooks' TFT 
states that the work value that equals the true Free Energy is the one which has the same probability in the 
forward and in the reverse distribution. 
<br/>
We will generate histograms (or numerical estimates of unormalized probability distributions) for both work
distributions with xmgrace, 

<br/>
Open them both directly with 
<br/>
<br/>

<h5>cd ..</h5>
<h5>xmgrace Work_fwd.txt Work_rev.txt</h5>

To compute histograms, first of all create a new graph : go to "Edit" -> "Arrange Graphs" and set the "Cols" value to 2.
Apply the changes and Close. Now you have two graphs. To compute the histograms, go to "Data" -> "Transformations" and 
click on "Histograms". From the "Source" list click now on the first (G0) and then the first "Set" (GO.SO). As a "Destination" list select the 
second (G1). Now have a look at the values you have for the distribution, typically between -420 to -360. Use these numbers
as "Start at" and "Stop at" and something like 40 bins. The more data points,
the more bins we could use. Click in "Normalize" and then press "Apply" to 
perform the histogram on the first data set. To obtain one for the second data set, simply select (G0.S1), under the second
"Set" in the first graph in the "Source" list and press "Apply". In order to see the histograms, select the new graph by clicking it with the mouse and then
press the "AS" (for Auto Scale) button on the upper left.

<br/>
<br/>
<font color=red size=+1> Question: </font>
Based on the two adjacent histograms, which is the estimate for the Free Energy value? How could we 
 improve the estimate? Do you think that 10 data points can create a significant ensemble?
<br/>
Let's try increasing the number of transitions.  We have prepared 400 short 5 ps simulations for both the forward and the backwards transitions. You can download  <a href="400runs.tar.gz"> here </a> all the output dhdl.xvg files.<br>

First extract the contents of the folder and get in the extracted folder
<h5> tar -xzvf 400runs.tar.gz <br>
<h5>cd 400runs/FWD_RUN_TFT</h5>

Now repeat the steps of the previous section to extract the work from each dhdl.xvg file, gather all work values into a txt file, and create the histograms for both the forward and reverse transitions. 
<br/>
<font color=red size=+1> Question: </font>
Which is the new estimate for the Free energy based on the intersection point of the distributions?  How does this estimate compare to the previous calculations? <br>

</a> <font color=#00c5d0 size=0>   <h2>OPTIONAL: Estimation of the free energy taking the logarithm of the Crooks equation </h2> </font>
Once you obtained the work distributions, it is possible to estimate the free energy taking the logarithm of the Crooks equation (see <a href="#crooks2"> here </a>). You should extract the portion of both distributions in which there is an overlap, and PF(W) and PB(-W) are not zero (to avoid singularities). Then, plot <b> <em>ln ( PF(W) / PB(-W) )</em> </b> as a function of <b> W </b> and do a linear regression.  The slope of this curve is <b> <em> &#946; = 1/KT </em> </b> and the intercept is <b>  <em> -&#946;&#916; F </em> </b><br><br>
<font color=red size=+1> Questions: </font>
How much does the regression deviate from a straight line? How does the estimate of  <b> <em> &#946; = 1/KT </em> </b> compare with the input value, <b> <em> &#946; = 1/(2.5 kJ/mol) </em> </b>, at the given temperature of 300 K? What is the estimate of the free energy?  How does it compare with the previous estimations? 
<br/>
<br/>

<!--
<p>
<font size=+1> Delete the folder where you did this exercise before moving to 
the next one, since it will require quite some disk space. </font>
</p>
-->

Go back to <a href="#contents">Contents</a>

<a name="pmf_ion_channel"></a> <font color=#00c5d0 size=+0>   <h2>C.  Potential of Mean Force for a potassium ion permeating an ion channel</h2> </font>

<p align="justify" >
Ion channels, located in the lipidic membrane that separates organelles or cell membranes, allow the passage of ions
from one side of the membrane to the other. Their structure and composition is diverse, although they
share some characteristics. Gramicidin is a small peptidic ion channel of 30 aminoacids, whereas potassium 
ion channels, like KcsA, are proteins with quaternary structure. Their function afftects electrochemical gradients, 
and thus ion channels have a fundamental role in the bioenergetics of living cells. A subtle balance of ion gradients is, for example, responsible
for the polarization-depolarization of neuron's membrane that leads to electrical signal transmission in nerve cells. 
Many membrane proteins need to couple their transport mechanisms to ion gradients. 
For these and many other reasons, ion channels are of great interest in biophysics and electrophysiology, as well as in medicine.
<br/>

<div align="center"><img src="gA_channel_bigger.png" align="center"></div>
<br/>

Ion channels differ from ion transporters because they do not need and external energy source to achieve their 
functionality. Their activity can be gated by several means: voltage gated, drug binding, pressure, or simple
ion gradient. 

<br/> 
Most ion channels present a selectivity filter to achieve specificity for certain types of ions. 
These regions are usually carefully constructed to have favorable stabilizing environment for the ion they want to
permeate. Ions in solution are stabilized by the interactions with the solvation water shell, as we saw in the previous
exercise. As the ion enters the channel several interactions with solvating waters disappear, 
which can not be fully compensated by the channel's partially hydrophobic interior. Since ions are charged species, this
desolvating effect is much stronger than for water, and so the ion flux is significantly lower compared to water flux.
<br/>
<br/>
Molecular dynamics is a very powerful tool to study the energetics of ion channels, provided a good set of parameters that
describes the interactions between channel, ions and membrane. Nevertheless, the high activation energy for ion permeation
makes direct estimation of ion flux almost impossible: the simulation time needed to observe a significant amount
of ion translocations is currently out of reach.
Luckily, rate theory provides a clear connection between the underlying energetics for ion permeation and their
rates or fluxes. Several theories and methodologies exist that connect the Free Energy profile, or Potential of 
Mean Force, with rates. Although they vary in the level of sophistication, the main idea is that the flux is propotional
to the ratio of populations in the lower energy state and the population in the highest energy along the path. Since
the populations in steady state are Boltzman weighted, the flux is inversely proportional to the exponential of the activation 
energy, the difference in energy between the lowest and highest energy along the path.
<br/>
<br/>
<div align="center"><img src="rate.gif" width="126" height="29"></div>
<br/>
<br/>
In order to predict ion selectivity, or compare ion fluxes qualitatively, we can then extract the Potential 
of Mean Force for the desired ion permeation and compare the activation energies.
In this exercise we will learn how to obtain a profile for an ion permeating an engineered peptidic channel. 
Their cylindric symmetry
clearly defines the main pore axis as the reaction coordinates. In this respect, we will effectively project all the 
forces of the orthogonal degrees of freedom onto the main reaction coordinate, reducing the complexity of the system to
a 1D mean interaction potential. Hence the name of Potential of Mean Force.
<br/>
In equilibrium simulations, the Potential of Mean Force could be extracted by integration of the force the ion
feels as it permeates the pore, or by computing the ion number density (probability distribution) along the channel.
<br/>
As said before, the lack of ion mobility in the time scales available for Molecular Dynamics makes it compulsory
to find alternative methods. The common approach is usually to force the ion to sample a given region of the 
reaction coordinate using an external potential of known characteristics. Umbrella Sampling method restrains the ion at given bins
along the channels using a harmonic potential. After removing the force due to the harmonic potential we obtain the 
underlying Potential of Mean Force. The method needs good sampling of the several bins to achieve a converged
equilibrated ensemble, especially critical in the regions where the potential is steep.
<br/>
Another possibility would be to drive the ion along the pore by means of a guiding harmonic potential: at a given speed, we 
pull the ions through the pore using a harmonic spring. If done infinitely slowly, the system does not dissipate energy and
the work done at a given coordinate equals the Potential of Mean Force.
<br/>
<br/>
<div align="center"><img src="guiding_spring.png" alt="Molla"></div>

But thanks to the non-equilibrium relationships discussed above, we can extract Free Energies out of an ensemble of 
non-equilibrium trajectories. Here we will use a special application of Crooks' TFT and the fact that our spring 
force constant will be very high. The method is know as FR method, or Forward-Reverse.

<br/>
<br/>
<br/>
<br/>
<center><h4> Crooks' TFT and the stiff spring approximation</h4></center>

The stiff spring approximation guarantees that the work distribution obtained is Gaussian. Combining this result
with Crooks' TFT, we can see that if the Forward trajectories generate a Gaussian work probability distribution with mean 
<img src="wf.gif" width="31" height="15"> and variance sigma, the Reverse probability 
distribution is also Gaussian with <img src="wr.gif" width="31" height="15"> mean and the same variance sigma.

<br/>
<br/>
<div align="center"><img src="gaussian_work.gif" width="317" height="34"></div>
<br/>
Putting all this together, we see that the Potential of Mean Force can be simply computed as the mean of the 
averaged work in Forward and Reverse direction (the minus sign is due to the definition of the dissipated work). There is 
no need to compute the overlapping point between the two work distributions, since they are Gaussians with
the same variance: the point were they cross is the average of the two mean values.

<br/>
<br/>
<table boder="0"cellpadding="20" align="center"  >
<td>
<div align="center"><img src="FR_result.gif" width="174" height="33"></div>
</td>
<td>
<div align="center"><img src="FR_gaussian.png" alt="FR visual"></div>
</td>
</table>
<br/>

Since generating enough trajectories to estimate a work average in the forward and reverse directions is time consuming,
here we will simply work on a set of pre-computed dynamics. For each ion being pulled in either direction, we obtain 
a file describing the position of the ion and the spring reference position at any time. Given a stiff force constant, that 
we previously selected (10000 kJ / mol nm^2), it is straightforward to compute the force the system is exerting on the ion as
a function of the spring position. Integration of the resulting force along the pore yields the work in a given direction.
<br/>
<br/>
<a href="pulling_movie.pdb"><font color=blue>Here</font></a> you will find a multiple entry pdb to visualize a trajectory of an ion
being pulled through a channel. Open the file with pymol:
<p>
<h5>pymol pulling_movie.pdb</h5> 
In Pymol's command line write:

<br/>
<br/>
<h5>show spheres, name PO1</h5>
to see the potassium ion. Press play.



the movie using the controls on the lower right side of the main window. Have a look and quit the viewer when satisfied.
<br> <p>
Now, remove the movie:
<h5>rm -f pulling_movie.pdb</h5>

<br/>
<br/>
And we start with the actual analysis.
<br/>
<br/>
In this <a href="ion_FR.tar.gz"><font color=blue>folder</font></a> you will
find all the needed files and scripts to follow the exercise. Download it to
your account.
<br/>
<br/>
First switch to the home folder:
<br/>
<br/>

<h5> cd </h5>
<p>
and extract the contents of the folder like we did before:

<h5>tar -xvzf ion_FR.tar.gz ; rm -f ion_FR.tar.gz</h5>

<p>
or, if you downloaded to the default 'Desktop' folder:

<br>
<h5>tar -xvzf Desktop/ion_FR.tar.gz ; rm -f Desktop/ion_FR.tar.gz</h5>

<p>


Get in the extracted folder:
<p>
<h5> cd ion_FR</h5>
<p>

You will see a couple of folders, one for each channel. If time
permits we will compute the Potential of Mean Force for three channels, otherwise we will illustrate
the method with just p-ala15. 

<br/>
<br/>
<h5>cd p-ala15_single</h5>

As said before, doing multiple simulation runs is very tedious if one has to do everything by hand. We will
first compute the work along one of the forward and reverse paths by hand, and afterwards we will use a set 
of scripts to compute the rest. Firstly, let's extract the work for the forward run,

<br/>
<br/>
<h5>cd forward_run</h5>
<br/>

Here you will find a pull.pdo file, which contains: the time (ps),  a reference position in the channel (we don't
need it here), the position of the group being pulled (ion, in our case) and the position of the spring (nm) .  Since we
know the force applied is harmonic with a force constant of 10000 kJ / mol nm^2, we can easily compute the force,

<br/>
<br/>
<div align="center"><img src="force_ctt.gif" width="243" height="19"></div>
<br/>
We will use the following comand to extract the value of the force at each spring position, which moves from one
end to the other of the pore,

<br/>
<br/>
<h5> export LC_NUMERIC=en
<br/>
 cat pull.pdo | awk '($1 != "#" && $1 != "#####") {print $3, 10000*($4 - $3)}' > force.txt
</h5>
<br/>
The first command makes sure that the scripting language AWK uses dots as the decimal separator. The second line
is the actual calculation: for each line of numeric input  we print the third column (position) and 
we compute the force based on the above formula. Finally, the pair of values is put into a file.
<br/>
Now we will sort the values corresponding to the z axis in ascending order,

<br/>
<br/>
<h5> sort -n -k 1 force.txt > sorted_forces.txt</h5>
<br/>
Now open the file sorted_forces.txt to perform the integration of the force, which will lead to the 
work along the path.

<br/>
<br/>
<h5> xmgrace sorted_forces.txt</h5>
<br/>

Never mind if you get an xmgrace warning. Just close the warning window and
proceed. It will not affect the result. As we did before, under "Data", select "Transformations", followed by "Integration", and press "Accept". 
The integrated curve is now in graph G0.S1. We will write it to a file: select "Data", then "Export" and
"ASCII". Select the graph GO.S1 and under "Selection" choose a name, for example <i>forward_work.txt</i>.
<br/>

Since we would like to average the work in both directions, we will need to make sure that both files have 
the same number of data points. This can be accomplished by performing a window average: all the data
points lying in the interval [z,z+width] will be averaged. Use the following command,

<br/>
<br/>
<h5> awk -f ../../p-ala15/forward_run/window.awk < forward_work.txt  > forward_W_av.txt  </h5>
<br/>

Copy the resulting file to the FR_single folder,

<br/>
<br/>
<h5> cp forward_W_av.txt ../FR_single  </h5>
<br/>

<font color=red size=+1> Question: </font>
If you have a look at the result, with xmgrace, you will see that this result cannot be
the correct Potential of Mean force. Why not? Should the potential energy be different
at both sides of the channel? 


<br/>
<br/>
Ok, so now we will repeat the same operations for the reverse path,

<br/>
<br/>
<h5>
cd ../reverse_run
<br/>
export LC_NUMERIC=en
<br/>
cat pull.pdo | awk '($1 != "#" && $1 != "#####") {print $3, 10000*($4 - $3)}' > force.txt
<br/>
sort -n -k 1 force.txt > sorted_forces.txt
<br/>
</h5>

Integrate the forces the same way as before. Export the result to a file, say <i>reverse_work.txt</i>. 
Since we have sorted the position in ascending orther, we automatically have switched the sign of the integration.
For that reason we can directly compute the average of both Forward and Reverse works to get the Potential 
of Mean Force.
We finally use window average to have a compatible set of data points, like before,


<br/>
<br/>
<h5> awk -f ../../p-ala15/forward_run/window.awk < reverse_work.txt  > reverse_W_av.txt
<br/>
cp reverse_W_av.txt ../FR_single
<br/>
cd ../FR_single
</h5>
<br/>

Now that we have all the work profiles along the channel, let's use the result we derived for 
TFT and the stiff spring approximation: average Forward and Reverse work to get the Potential of Mean Force.
We will use a tiny script that takes care to average the right values:

<br/>
<br/>
<h5> ./average_work.csh forward_W_av.txt reverse_W_av.txt | grep -v csh > Free_Energy_15.txt 
</h5>
<br/>
This <a href="reference_PMF_ala15.txt">file</a> contains a reference PMF for this channel. Compare it with the 
one you just computed and the work performed in the forward and reverse path,

<br/>
<br/>
<h5>xmgrace ~/Desktop/reference_PMF_ala15.txt Free_Energy_15.txt forward_W_av.txt reverse_W_av.txt </h5>
<br/>

The black curve is the reference Potential of Mean Force and the red curve is the
averaged curve we just calculated. The green curve is the forward transition,
whereas the blue curve is the reverse transition.
<br><br/>
<p>
<font color=red size=+1> Question: </font>
Did the result get better, after averaging? Where is the main barrier for ion permeation through
this channel located?
<br/>
<br/>

Now that we learned that the approach seems to yield reasonably good results, let's compute a bunch
of work profiles in both directions to see how the overall result improves. Since it's a lot of 
work to do it by hand, we will use scripts that will automate the exact same process you just did,

<br/>
<br/>
<h5>
cd ../../p-ala15
<br/>
cd forward_run
<br/>
</h5>
This script will generate different work profiles for 5 different trajectories in the Forward direction.
<br/>
<br/>
<h5>
./compute_work.csh
<br/>
</h5>
<br/>
Now move all the resulting profiles to the folder where we will average them all,

<br/>
<br/>
<h5>
cp W_fwd_*.txt ../FR_average
</h5>
<br/>

To obtain the work in the Reverse direction, let's simply do the same again,


<br/>
<br/>
<h5>
cd ../reverse_run
<br/>
./compute_work.csh
<br/>
cp W_rev_*.txt ../FR_average
</h5>
<br/>

Now we move to the FR_average folder and perform the averages with the following commands,


<br/>
<br/>
<h5>
cd ../FR_average
<br/>
./do_averages.csh
</h5>
<br/>

Have a loook at the obtained Free Energy (or Potential of Mean Force) profile. 
Compared it with
the previous one using xmgrace:
<p>
<h5>
xmgrace ~/Desktop/reference_PMF_ala15.txt Free_energy.txt
</h5>
<p>
<br><br/>
<font color=red size=+1> Question: </font>
Does the result improve?  How does it compare to the reference profile?
<br><br/>

Since we already know how to use the Crooks fluctuation theorem to extract
potentials of mean force, let's use this method to learn something about ion
channels.  Following the same procedure, we already computed the work along the
trajectory for two channels longer than 15 aminoacids, namely 19 and 25. To
compute the Potential of Mean Force, simply move to their FR_results

<br/>
<br/>
<h5>
cd ../../p-ala19/FR_results
<br/>
./do_averages.csh <br> <p>
</h5>
Now we align the profile with the previous one:
<br/>
<br/>
<h5>
awk '{print $1-0.3,$2}' Free_energy.txt > t ; mv -f t Free_energy.txt <br>
</h5>
and look at the two together:
<br/>
<br/>
<h5>
xmgrace Free_energy.txt ../../p-ala15/FR_average/Free_energy.txt
</h5>

<h5>
cd ../../p-ala25/FR_results
<br/>
./do_averages.csh <br>
</h5>
Again, we align the profile with the previous ones:
<br/>
<br/>
<h5>
awk '{print $1-0.5,$2-5}' Free_energy.txt > t ; mv -f t Free_energy.txt <br>
</h5>
and look at them together:
<br/>
<br/>
<h5>
xmgrace Free_energy.txt ../../p-ala15/FR_average/Free_energy.txt ../../p-ala19/FR_results/Free_energy.txt
</h5>
<br/>


Compare the resulting profiles with the p-ala15. 

<br/>
<br/>

<font color=red size=+1> Question: </font>
How does the profile change as we move to longer channels? Would you expect this effect
to be linear?
<br/>
<br/>

Go back to <a href="#contents">Contents</a>



<a name="references"></a> <font color=#1a83c4 size=+1> <h2>Further references:</h2> </font>
<ul>
<p>
<font color=#1a83c4 size=+1>Books:</font>
<p>
<li> Editors: Chipot C. , Christophe A. et al., <EM> <b> Free Energy Calculations </b> </EM>, Springer Series in Chemical Physics, Vol. 86,  <a href="http://goopc4.sub.uni-goettingen.de:8080/DB=1/LNG=EN/SID=eff2fb9c-2/CMD?ACT=SRCHA&IKT=1016&SRT=YOP&TRM=free+energy+calculations+chipot&MATCFILTER=N&MATCSET=N&NOSCAN=N&ADI_BIB="> [link] </a> . 
<p>
<p>
<font color=#1a83c4 size=+1>Advanced reading:</font>
<li>  C. Jarzynski   <EM>Nonequilibrium Equality for Free Energy Differences </EM> <b> Phys. Rev. Lett.. </b> 78: 2690 (1997). <a href="http://prl.aps.org/abstract/PRL/v78/i14/p2690_1"> [link] </a>
<li>  C. Jarzynski   <EM>Equilibrium free-energy differences from nonequilibrium measurements: A master-equation approach</EM> <b> Phys. Rev. E. </b> 56: 5018 (1997). <a href="http://pre.aps.org/abstract/PRE/v56/i5/p5018_1"> [link] </a>
<li>  G. E. Crooks.   <EM>Nonequilibrium Measurements of Free Energy Differences for Microscopically Reversible Markovian Systems</EM> <b> J. Stat. Phys. </b> 90: 1481 (1998). <a href="http://www.springerlink.com/content/l172n2x114238462/"> [link] </a>


<li>  Goette M, Grubmuller H, <EM> Accuracy and convergence of free energy differences calculated from nonequilibrium switching processes. </EM> <b> J. Comp. Chem.  </b> 30: 447-456 (2009). <a href="http://www.mpibpc.mpg.de/home/grubmueller/publications/PDFs/Goette_2009_JCC_30_447-457.pdf "> [link] </a>


</ul>

</p>
</div>
</div>
</div>
